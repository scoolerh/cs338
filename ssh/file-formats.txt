//Hannah Scooler 

====== Private Key ======

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

Based on RFC 8017, I expect this file to contain the following: 
    an integer representing the version number,
    an integer n represting the modulus, 
    an integer e representing the public key exponent,
    an integer d representing the private key exponent,
    an integer p representing the first prime factor, 
    an integer q representing the second prime factor, 
    an integer that is equal to d%(p-1),
    an integer that is equal to d%(q-1), 
    and an integer that is equal to (inverse of q)%p

Using Lapo Luchini's ASN.1 decoder, I copied and pasted my 
private key. I stripped the header and footer because "end
of private key" and "start of private key" are pretty self-
explanatory. Just from skimming the hexadecimal on the right in 
the Luchini tool, I was able to see 9 different '02's in blue, 
which represents 9 different integers. Since the above list is 
composed of 9 integers, this made me feel good about the 
components of the list being what I expected them to be. I then 
went through and analyzed each of these integers. 

The first integer in the decoded bytes file is 'version'. It is
composed of the bytes '02 01 00', which is the DER encoding for
an integer of length 1 with a decimal value of 0. According to
the RFC 8017, since the value is 0, this means that the 
encoding uses RFC 8017 as the version of the document. The 
offset is 4, since there are 4 bytes before it in the 
hexadecimal decoding. 

The second integer is 'n', which represents the modulus. It has
offset 7 and begins with the bytes 02 82 01 81. The 82 is the 
length octet, and it translates into the binary 1000 0010. The 1
in bit 8 represents the fact that the encoding is in definite
long form, and the 1 in bit 2 informs us that there are 2
following octets. These octets are the bytes 01 81, which
translate to the binary 0000 0001 1000 0001 and represent the 
length of the integer. By translating this to decimal, we get 
that the integer is 1+128+256 = 385 octets long. The Lapo 
Luchini decoder then tells me that the value of the integer is n
= 0x00c19bdf092155c4b043d1828f21a1bc7072df2ba93530ad265266c6b71b
cd1cd5cec74d4d8c998a91205fa8b079b287a0806e41b9a40d88c79202df1782
5b2eb1d3165ee1a2ec1dca90159ed2eb0bbebf7b7b64e20c33db701d2651aa3d
3ff3c0f62c662361a0ae4c94a2bb63633916fd12bddba00486b8f5e27a1ae62d
48845a6ae4644d4c97252cde8530923073c6188aa045020099ccba48e68d297b
454f5c82dd70946bd00b3cc06b66d0061568da31bd6202a0db4c5084bd04a4ca
16fbb94ceb3aa6f8e18665899e2ca7c7a5861fb30a003288796af339d6fcb6c1
625deafb3a774abbf967d325fa645e9871236eea4fc94407156a5f271fdec258
3920d249ab6e8ad5a915277addb8c19c503df9b766b3950cacd7bdaa56ed6423
aa76d1fb59fc9dbc6a51fb3fcfa7a6c673a6e3c993d93450eb452acb0a898b07
0381e472bbe6f9a2da81fac72b920d2d2bb5ecb503a0a097def9ca8774390369
89c58fc5305bca520228d14a76477dda24a834ae0c3c313768387c2598b9ff9c
da8247 . 

The third integer is 'e', which represents the exponent used for
the public key. It has offset 396 (which makes sense because the
last integer was at offset 7 and had 385 octets + 4 DER bytes =
396). The DER encoding has 03, which means that the length of 
the integer is 3 bytes. Those 3 bytes are 01 00 01, which 
Luchini tells me has a decimal value of 65537. Thus e = 65537.

The fourth integer is 'd', which should represent the private
key exponent. It has offset 401 and starts with the DER encoding
82 01 81. As I found for n, this means that the integer has a 
length of 385 octets. Luchini then gives a value for this 
integer as d = 0x0093abd30380c48d80304a25fe0c15f3c8052609844748b
858c97310d06b49185c501a9df0af741147be5c982afab7dc50e484b466e7255
79578ddedd15da134cd7786d199e28d9bef7bd4b1ce886eedefd93c75e7208d9
12b43608ddb7e5a400e86f5b875f629fba7f79ae3b8dbde989530ed550e0945c
4dfeefd5975054711847191809ba0f68be95c545486bca4218d6876f40ba1efa
d42cd05e4d7a5e968add437187e6c794388f3ef377d2596c0e1e41c621c451ad
f6b6ec3493e73d1f1eec17dc537f39c1d085665641ac79249227e6dd75e3140d
7c3433b861fdefba344e0c00a5fea66d8f741ebcc6876eb0fa1dd9bd25c58c1a
b122451a856eab89915ad600d0f67860693210e1fbf5a9a9a0ceb1885b15b547
82f12b3cc28dd95a9e6d674944d7eaeaa8862cac610bb49eb1c3ddd5741678a0
25a31b28789f33b370982fbd1a1df1d9756b9824f2890bd95392ae86ae49f879
3abd35d525b059168fdbf8c890a1583a2346b7553f08df88ccc077d833955768
e90fe983457f64abc69 .

The fifth integer is 'p', which is supposed to represent the 
first prime factor. It has offset 790, and begins with the DER
encoding 81 C1. The 81 indicates that this is definite long form
and that there is one octet representing the length. This octet
is the C1, which is 1011 0001 in binary. In decimal this is 
1+16+64+256 = 337, so the length of the integer is 337 bytes.
From Luchini, I get that these bytes result in the value p = 
0x00e2528583033479bf5d7e862ea4045269da35cbd1818eb582d982763194b7
050117d035ac7d43b2a324401b9cb8600a169b430f07e4999ee52d1e74248f86
fcffd0188f6e6e1326a28b4d72b1dcc14fcd9e253f6b1b05af25be5b89d224a8
a91cb1cee7a1c7ec7265c035b8804a8b0330fef1759ba9d8972bb3c52f129b25
44fa894d922074e17e4b9e7df477f6ab3b0cd4fe5980093d160f329dddc2b296
b38da84109ac62953f5d0ff1b9431c5eb980a1da6af75c794388f01e5a8dd126
40b3 .

The sixth integer is 'q', which should be the second prime 
factor of n. It has offset 986, and begins with the same DER
encoding 81 C1, so q also has a length of 337 bytes. These bytes
result in the value q =  0x00daff2e89b60ef74a75156123c5fb0ea89c4
ef576999a1174119c7d145f1a01fc9373756e4e297d2b7c358af05ec2beb3f03
c280280f639ec907b4522aff50a770d391ce32289a527c9299b7b9df90d1e285
b31d53dfcbfae20e420e9ab64bad55edf1a90ea072a38d4d705abde06670f9ef
4e5f0cc02d1c8848a82ba0acadcd18621bd2018902c5c805aeef0e3ef5cb36e7
65b9cbf4df32e463da3c8d1cdb5160451fd8e327711a7fc8a6d7e9822cf18bb4
65855274c542c5a159339b6c11a1d.

The seventh integer is supposed to be equal to d%(p-1). It has
offset 1182, and again begins with 81 C1. These 337 bytes then
give me the value d%(p-1) = 0x00a3924cd8818a7daba760f88de11116
975694a6f88690a3f32c4d342b657659718eca76e071b069fdab07826d647c
550e3dacdbc232a02ccd2a2ce6783e1babe31f7d80bca965c1f89c819f3199
8145b230686f4b73be49f6177c854192292c00872a29132e316004d6447d52
8b8da902d25fa5469a1ce63539ba7be910a481142a041c66c4d2ecbaae940e
0a5e0727a880904c13539a08c57729cdcb17d3ff7594735d107037ba1202a2
0be9cb29531cfadda78d9c1230935a2835fe6579262d . 

The eighth integer is d%(q-1). It has offset 1378 and begins
with 81 C1 so it also has length 337. These bytes have the 
value d%(q-1) = 0x00bb586c7690d1f2c9b6aa0884f2fc9888b3d77473f669
701eec660436e638b8945b8bfd5cd4eef74eb91e90f29b0e5cd8505f1617363d
ee45ab40595f9849b79f2b27bdc7ada7352b7912e819738638aba0f88b0412d8
631e52b2f659102fc7097bf4bea45420b7051147b569573200fec30c5c9d87d9
ad9fad8b54d455214090d9ff88eca936c54c88ddc1e54009683373ff3ad6386e
35e8535cadfdc1460a718056a7e3fad613bbb2f6b53f04655ae79c664c70e482
8ecbb6711896d9fa0e1d . 

Finally, the last integer is supposed to be the inverse of q mod
p. It has offset 1574 and begins with 81 C0. Again, the 81 tells
me that this is definite long form and that there is one octet
that gives the length. The C0 is 1011 0000 in binary, which is 
16+64+256 = 336 in decimal, so this integer should be 336 octets
long. The value of this integer is given as (inverse q)%p = 0x79
552a4ba401225ef62ab77bd720a94f653655efaab2e2576bf8d362d3ff3386c6
d3d24e7f98711b3618c3f6c2409d3188d86a702ec7cd3d6a92cda1097ec7174f
a71d36823bce59182debb3362ceaaceb6e7ea07c070d27e783fb1394732ffca7
a06960f9d2896c51910e27aa6e3a7905b46aa7ffcc35b40aeb2c9caad4e313fc
5e3475fe9926f989da6c22cacc95bbae098e3d041d0c3cd6e737717258f4a168
29bcf033943f2a4bef243b23e28f270476990202ac34d371d7ee6fa5cc2ffe .

====== Public Key ======

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDBm98JIVXEsEPRgo8hobxwct8r
qTUwrSZSZsa3G80c1c7HTU2MmYqRIF+osHmyh6CAbkG5pA2Ix5IC3xeCWy6x0xZe
4aLsHcqQFZ7S6wu+v3t7ZOIMM9twHSZRqj0/88D2LGYjYaCuTJSiu2NjORb9Er3b
oASGuPXiehrmLUiEWmrkZE1MlyUs3oUwkjBzxhiKoEUCAJnMukjmjSl7RU9cgt1w
lGvQCzzAa2bQBhVo2jG9YgKg20xQhL0EpMoW+7lM6zqm+OGGZYmeLKfHpYYfswoA
Moh5avM51vy2wWJd6vs6d0q7+WfTJfpkXphxI27qT8lEBxVqXycf3sJYOSDSSatu
itWpFSd63bjBnFA9+bdms5UMrNe9qlbtZCOqdtH7WfydvGpR+z/Pp6bGc6bjyZPZ
NFDrRSrLComLBwOB5HK75vmi2oH6xyuSDS0rtey1A6Cgl975yod0OQNpicWPxTBb
ylICKNFKdkd92iSoNK4MPDE3aDh8JZi5/5zagkc=han@Hannahs-MacBook-Air-
5.local

MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAwZvfCSFVxLBD0YKPIaG8
cHLfK6k1MK0mUmbGtxvNHNXOx01NjJmKkSBfqLB5soeggG5BuaQNiMeSAt8Xglsu
sdMWXuGi7B3KkBWe0usLvr97e2TiDDPbcB0mUao9P/PA9ixmI2GgrkyUortjYzkW
/RK926AEhrj14noa5i1IhFpq5GRNTJclLN6FMJIwc8YYiqBFAgCZzLpI5o0pe0VP
XILdcJRr0As8wGtm0AYVaNoxvWICoNtMUIS9BKTKFvu5TOs6pvjhhmWJniynx6WG
H7MKADKIeWrzOdb8tsFiXer7OndKu/ln0yX6ZF6YcSNu6k/JRAcVal8nH97CWDkg
0kmrborVqRUnet24wZxQPfm3ZrOVDKzXvapW7WQjqnbR+1n8nbxqUfs/z6emxnOm
48mT2TRQ60UqywqJiwcDgeRyu+b5otqB+scrkg0tK7XstQOgoJfe+cqHdDkDaYnF
j8UwW8pSAijRSnZHfdokqDSuDDwxN2g4fCWYuf+c2oJHAgMBAAE=

Based on the Appendix to RFC 8017, I would expect this file to
contain an integer n representing the modulus and an integer e
representing the publicExponent. 

In order to decode this key, I first removed the "BEGIN PUBLIC
KEY" and "END PUBLIC KEY" header/footer for the same reason as
above. I then pasted the rest into Luchini's tool. This then
gave me some information at the top that was supposed to 
represent the encryption algorithm, and below was a sequence 
that included the two integers I was expecting, starting with
the blue 02 indicators. I then preceded to analyze these 
integers to make sure that they represented n and e. 

The first integer, representing 'n', had the offset 28 and 
had a DER encoding beginning with 82 01 81. As I found when 
exploring the private key, this meant that there would be two
octets that represented the length of the integer. The length
is found in 01 81, which is 0000 0001 1000 0001 in binary and 
1+128+256 = 385. Thus this integer has a length of 385 octets,
which is already a good sign because the n in the private key
has that same length. The value of this n in decimal is 
4393715873250808272996258552910528314428740394814442403260967288
1972812438619891915203158942933638581649255190979602512523217884
7148752745881172253111358474515767828860024055699457166928490265
2910552193046785800453114799667831361403171270963441867548238365
6769660447928440573743669635978266266006292907166698129524787195
6496967497402321297972110715363522962746139144335907651166938666
3835789795446277013304147348032058162521979037058839052951424317
3358676373674365776935757919470607422742303657680970166091079459
8462931335973830681496714055789912909144334362482694735119598728
0681330060867052661613307875665605469302795159825725230386443740
5282522486273032076379380803251342810870921647881477421711086247
4560894366547313746351414228032687969446706748447187074499118209
0054392905303887059091378410257336706817967817347923359563800434
6278971044859307269335581411896635116474704384054333651313395736
39437621215794398486010167879 . Checking it against the n I got
previously, they are exactly the same! 

The second and last integer should represent the same 'e' as in
the private key. The offset is 417 and the DER encoding starts
with 03, meaning that there the integer is 3 octets long. The 
value is 01 00 01, which is equal to 65537 in decimal! Again,
this is exactly the same as the 'e' from the private key. 

====== Sanity Check ======

In order to make sure that I actually got values in my key that
worked, I used a python program to check the math. This is 
test.py, which can be found in the same ssh directory. First, 
for the private key I would expect that p * q = n, since p and q
are supposed to be a factored version of n. I also checked to 
make sure that the seventh integer in the private key file 
actually equaled d%(p-1), and that the eighth integer actually
equaled d%(q-1). All of these tests and others passed and can be
found in test.py. 