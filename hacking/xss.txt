Hannah Scooler 

PART 1: COOKIES

a. The only cookie for cs338.jeffondich.com is the cookie named 'theme', which 
has a value of 'default'. 

b. When I changed my theme to red, the value of the 'theme' cookie turned from
'default' to 'red', and similarly when I changed the theme to blue, the value 
turned to 'blue'. 

c. When I try to set my theme from default to red, I see a HTTP request 
GET/fdf/?theme=red with a Cookie header "Cookie: theme=default". The response
for this request had a Set-Cookie header "Set-Cookie: theme=red; Expires=Sat,
03 Feb 2024 19:42:33 GMT; Path=/". I did see the same cookie values in the 
Burpsuite as I did in the Inspector in my regular window. 

d. Yes, the red theme is still present! 

e. The current theme is transmitted between the browser and the server through 
Cookies. The browser will have the value of the Cookie stored in text files on
the hard drive/browser, and so when the browser loads the page, it can let the 
server know what the current theme is by sending the Cookie header and its 
value in the HTTP request. 

f. The change is transmitted between the browser and the server by having the
browser send a new GET request with the ?theme=____ updated, and then the 
server responds by using Set-Cookie to tell the browser what the new theme is.
The browser then will make this change and store the new theme in the Cookie
so that the server will know what the new theme is next time the browser sends
an HTTP request. 

g. Since the value of the cookie is editable in the Inspector, if you change 
the value of the theme cookie to 'red', 'blue', or 'default' (depending on what
you want) that will change the FDF theme.

h. Using the proxy tool, you can edit the HTTP request from GET /fdf/ and add 
GET /fdf/?theme=blue or whatever the desired color is, and this will change the
theme. 

i. The operating system stores cookies in small text files on the hard drive 
or on the computer's browser directory. On my Mac, cookies are stored in 
~/Library/Application Support/Google/Chrome/Default/Cookies. When I navigated
to this, it opened a sqlite file. 

PART 2: CROSS-SITE SCRIPTING (XSS)

a. First, Moriarty writes a post that contains Javascript or HTML/CSS that has
some effect when run. Then, Moriarty posts this to the FDF. When other users
log onto the FDF, they will be able to see the title of this post. If they
click on it, then the browser will route to a page that displays this post. 
Part of this process includes displaying the HTML of the post's content. Since
the post's content includes some Javascript, when the browser tries to show the
HTML it will parse and execute the Javascript in the user's browser. This will 
enable Moriarty's attack. As long as the post remains on the FDF, any time 
a user tries to click on the post they will be vulnerable to this attack. This
means that the attack can target any number of people for any length of time.

b. One attack would involve just running a script with an infinite while
loop. This is not complex code at all, and will still have a pretty malicious
effect, because it would take a lot of the user's processing power. I wonder
if there is a way to keep this code running even when the user left the page,
so that their CPU would continuously need to be used for this script, 
potentially crashing their computer or just making it really warm and loud. 

c. Javascript provides the ability to get a user's IP address, which can then
be used to approximate the location of the IP address and thus the user. This
estimate of location tends to be accurate up to the city, which is data that 
a user certainly wouldn't want a malicious entity to have. 
https://www.geoapify.com/how-to-get-user-location-with-javascript 

d. A potential technique to prevent this type of attack is for the browser to 
disable Javascript, as then the code injections won't run. However, this will
potentially cause other websites to not run properly and could disable some
useful or important features. Another technique would be to take the input from
the user and display it as a string, rather than letting it be HTML in its own
right. This way the input would not be treated as code, so it would not be
parsed and executed, preventing this sort of attack. 
