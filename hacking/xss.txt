Hannah Scooler 

PART 1: COOKIES

a. The only cookie for cs338.jeffondich.com is the cookie named 'theme', which 
has a value of 'default'. 

b. When I changed my theme to red, the value of the 'theme' cookie turned from
'default' to 'red', and similarly when I changed the theme to blue, the value 
turned to 'blue'. 

c. When I try to set my theme from default to red, I see a HTTP request 
GET/fdf/?theme=red with a Cookie header "Cookie: theme=default". The response
for this request had a Set-Cookie header "Set-Cookie: theme=red; Expires=Sat,
03 Feb 2024 19:42:33 GMT; Path=/". I did see the same cookie values in the 
Burpsuite as I did in the Inspector in my regular window. 

d. Yes, the red theme is still present! 

e. The current theme is transmitted between the browser and the server through 
the Cookie, since when the GET request is sent, the server will tell the 
browser to save the theme as a Cookie, and when a new GET request is sent the
browser will let the server know what the current theme is by storing it in the
Cookie key-value pair. 

f. The change is transmitted between the browser and the server by having the
browser send a new GET request with the ?theme=____ updated, and then the 
server responds by using Set-Cookie to tell the browser what the new theme is.
The browser then will make this change and store the new theme in the Cookie
so that the server will know what the new theme is next time the browser sends
an HTTP request. 

g. Since the value of the cookie is editable in the Inspector, if you change 
the value of the theme cookie to 'red', 'blue', or 'default' (depending on what
you want) that will change the FDF theme.

h. Using the proxy tool, you can edit the HTTP request from GET /fdf/ and add 
GET /fdf/?theme=blue or whatever the desired color is, and this will change the
theme. 

i. The operating system stores cookies in small text files on the hard drive 
or on the computer's browser directory. On my Mac, cookies are stored in 
~/Library/Application Support/Google/Chrome/Default/Cookies. When I navigated
to this, it opened a sqlite file. 

PART 2: CROSS-SITE SCRIPTING (XSS)

Steps to take:
    - Login to the FDF as Alice (alice@example.com, password: alice) or Bob 
    (bob@example.com, password: bob) or Eve (go ahead, guess her email and 
    password!).
    - Make a post and view your post by clicking on its title in the list of 
    posts at the bottom of the page.
    - Go back to the FDF home page.
    - Click on each of Moriarty's posts and pay attention. What happens?
    - Study the source code of each of Moriarty's posts. It's shown on the post
    details page itself, but you should also right-click on the background and 
    select View Page Source to take a look at the raw HTML. Or, alternatively, 
    you can select the Elements tab in the browser Inspector and take a look at
    the source. Regardless, your goal is to figure out how Moriarty made the 
    FDF behave surprisingly.
    - Experiment making your own posts as Alice, Bob, or Eve. Make the title 
    descriptive of what you're trying to do, but fool around in the the post 
    body however you want to. (If you're unfamiliar with HTML, CSS, and 
    Javascript, you may want to grab a classmate who knows about those things 
    to help you implement your nefarious plans.)

a. Provide a diagram and/or a step-by-step description of the nature and timing
of Moriarty's attack on users of the FDF.

b. Describe an XSS attack that is more virulent than Moriarty's "turn something
red" and "pop up a message" attacks. Think about what kinds of things the 
Javascript might have access to via Alice's browser when Alice views the 
attacker's post.

c. Do it again: describe a second attack that is more virulent than Moriarty's,
but that's substantially different from your first idea.

d. What techniques can the server or the browser use to prevent what Moriarty 
is doing?
